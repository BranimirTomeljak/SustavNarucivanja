@startuml backend_diagram

class Appointment {
    +appointmentId: int
    +patientId: int
    +doctorId: int
    +nurse: int
    +time: timestamp
    +duration: interval

    +{static} fetchBy(property, id) 
    +isSavedToDb()
    +{static} dbGetBy(table, what, that)    
    +saveToDb()    
    +removeFromDb()
    +_stringify(a)
    +conflictsWithDb ()
}

class Team {
    +teamName: string
    +doctorId: int

    +{static} fetchByTeamName(teamName) 
    +isPersisted()
    +_checkIsIn(where)    
    +{static} dbGetTeamBy(what, that, table)   
    +saveTeamToDb()
    +_saveteamNameToDb(table)
    +removeTeamFromDb()
}


class User {
    +id : int
    +name :  string
    +surname : string
    +sex : string
    +phonenumber : string
    +mail : string
    +password : string
    +dateofbirth : Date
    
    +{static} fetchBymail(mail)
    +{static}  fetchById(id)
    +isUserInDb()
    +checkPassword(password)
    +isAdmin()
    +isPatient()
    +isNurse()
    +isDoctor()
    +_checkIsIn(where)
    +{static}  dbGetUserBy(what, that, table)
    +saveUserToDb()
    +_saveIdToDb(table)
    +removeUserFromDb()
    +copySelfUser()
    +makeAppointment()
    +cancleAppointment()
}


class Patient {
    +addToDb()
    +{static} getById(id)
}

class Nurse {
    +addToDb()
    +{static} getById(id)
    +getAll()
    +defineServices()
}

class Doctor {
    +addToDb()
    +{static} getById(id)
    +getAll()
    +defineTerms()
    +defineRules()
}

class Admin {
    +addToDb()
    +makeTeams()
    +makeDoctor()
    +makeNurse()
}

User <|-- Doctor
User <|-- Patient
User <|-- Nurse
User <|-- Admin

Appointment "1" *-- "1" Patient
Appointment "1" *-- "0..*" Nurse
Appointment "1" *-- "1" Doctor

Team "1" *-- "0..*" Doctor
Team "1" *-- "0..*" Nurse
Team "0..*" --* "1" Admin


@enduml
